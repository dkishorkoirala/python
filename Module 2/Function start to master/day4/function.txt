Function pro mode
1. Positional vs keyword arguments
2. *args-> flexible positional inputs
3. **kwargs-> flexible keyword inputs
4. return v/s print (very important)
5. nested Function
6. Functions as objects(passing functions around)

1. Positional vs keyword arguments
concept:
in python, arguments can be passed either:
-by position(like regular order: greet("Dibash"))
-by keyword (you write the parameter name: greet(name="Dibash"))

ex:
def greet(name, message):
    print(f"{message} to {name}!")

greet("Dibash", "Goodmorning") #positional
greet("Dibash", message="Goodmorning") #keyword
greet(message="Hello", name="Guruji") #order doesn't matter with keyword

2. *args (flexible Positional arguments)
concept:

use *args when we don't know how many positional arguments will come

ex.
def add_num(*args):
    total = 0
    for num in args:
        total += num
    return total

print(add_num(1, 2, 3))
print(add_num(5, 10, 15, 20))
we can send 1, 2, or 50 numbers!!

3. **kwargs (Flexible keyword arguments)
concept;

use **kwargs to accept any number of named keyword arguments.

ex.
def print_profile(**kwargs):
    for key, value in kwargs.items():
        print(f"{key}: {value}")

print_profile(name = "Dibash", age = 23, hobby= "coding")

4. return vs print (very important):

print               return
Display output      sends back a value
for user            for the code
doesn;t store       can be stored

ex.
def sq(x):
    return x * x

result = sq(4)
print(result)

5. nested functions
concept:

a function inside another function!

ex. 
def outer():
    def inner():
        print("Hello from inner function")
    
    inner()
outer()

6. Function as an object(advanced power!)

you can pass a function to another function. This is start of 
functional programming.

ex.
def shout(text):
    return text.upper()

def wispher(text):
    return text.lower()

def greet(func, mess):
    print(func(mess))

greet (shout, "Hello")
greet (wispher, "hello")

mini task
Write a function called total_marks() that takes any number of subject
 marks using *args and returns the sum.

Expected:
total_marks(85, 90, 78) â†’ 253

DAILY CHALLENGE PROJECT
Build a Flexible Bio Generator
Create a function create_bio() that accepts any number of keyword arguments like 
name, age, skill, dream, etc. and prints them nicely.

Example:

create_bio(name="Dibash", age=22, skill="Python", dream="AI Engineer")

# Output:
# name: Dibash
# age: 22
# skill: Python
# dream: AI Engineer