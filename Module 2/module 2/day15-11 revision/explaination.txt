Day 11: lambda function recap:
Lambda function are anonymous (nameless) functions that we define with 
the lambda keyword:
square = lambda x: x *x
print(square(5))

practice:
is_odd = lambda x : x %2 != 0
print(is_odd)

data = [(1, 3), (2, 1), (5,1)]
print(Sorted(data, key = lambda x: x[1]))

use lambda inside map(), filter(), sorted() when your function is 
simple.

Day 12- return vs print and lambda practice
print()- shows the output
return sends data out of the function, so it can be reused.

def double(x):
    return x * 2

val = double(5)
print(val)

practice:
nums = [1,2,3,4]
squares = list(map(lambda x: x**2 , filter (lambda y: y% 2 ==0 , nums)))
print(square)

tips: always use return when you need to store or use the value later.

Day 13: List comprehension
a cleaner way to write for loops inside a list:
nums = [1,2,3,4]
squares = [ x ** 2 for x in nums]

word = "apple"
no_vowels = [ch for ch in word if ch not in 'aeiou']
print(no_vowels)

nested = [[1,2], [3,4], [5]]
flat = [x for sublist in nested for x in sublist]
print(flat)

use list comprehension to make code compact but still readable

day 14: Scope: global, local, nonlocal
python looks for variables in :
1. local Scope(inside a function)
2. nonlocal (inside nested function)
3. Global(outside any function)
x = 10
def outer ():
    x = 5
    def inner():
        nonlocal x
        x += 1
        print("Inner: ", x)
    inner()
    print("Outer:",x)
outer()

tip:
use global when changing global variables inside functions.
use nonlocal to modify enclosed (outer) variables inside nested 
functions

Day 15: nested functions
a function defined inside another function. can be used for 
encapsulation or closures.

def greet(name):
    def say_hello():
        print(f"Hello, {name}")
    say_hello()

def make_multiplier (n):
    def multiply(x):
        return n * x
    return multiply

times5 = make_multiplier(5)
print(times5(3))
#15

nested function help keep logic clean and protect internal variables

final challenge for today
def student_grader(name, scores):
    def calculate_avg():
        return sum(scores)/len(scores)

    def is_topper():
        return calculate_avg() >= 90
    
    return f"{name} - Avg: {calculate_avg()}- topper: {is_topper()}"

print(Student_grader("alice", [92, 88, 95]))